name: Build mGBA ARMv5

on:
  push:
    branches: ci*
  release:
  workflow_dispatch:
    inputs:
      version:
        description: 'mGBA バージョン'
        required: false
        default: '0.0.1'

jobs:
  build-linux-armel:
    name: Build linux/armv5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build mGBA (armel)
        run: |
          docker run --platform linux/arm/v5 -i -v $PWD:/ws arm32v5/debian:11 bash -eux -c "
cd /ws

# Debian 11 用 APT リポジトリ修正
echo 'deb http://archive.debian.org/debian bullseye main contrib non-free' > /etc/apt/sources.list
echo 'deb http://archive.debian.org/debian bullseye-updates main contrib non-free' >> /etc/apt/sources.list
echo 'Acquire::Check-Valid-Until \"false\";' > /etc/apt/apt.conf.d/99ignore-check-valid-until

# 必要パッケージ
apt update
apt -y install git build-essential cmake autoconf automake libtool pkg-config libsdl2-dev libx11-dev x11proto-dev

# ソース取得
git clone --depth=1 https://github.com/mgba-emu/mgba.git
cd mgba

mkdir -p build && cd build

cmake .. -DCMAKE_BUILD_TYPE=Release \
         -DCMAKE_INSTALL_PREFIX=/ws/armel \
         -DENABLE_GUI=ON \
         -DENABLE_SDL2=ON \
         -DENABLE_SOUND=OFF \
         -DENABLE_NETPLAY=OFF \
         -DENABLE_RECORDING=OFF \
         -DENABLE_TOOLS=ON \
         -DENABLE_TESTS=OFF

make -j\$(nproc)

mkdir -p /ws/armel
cp mgba /ws/armel/mgba
chmod +x /ws/armel/mgba
"

      - name: Prepare go-bin-deb and generate package
        run: |
          wget https://github.com/mh-cbon/go-bin-deb/releases/download/0.0.19/go-bin-deb-amd64.deb
          sudo apt -y install ./go-bin-deb-amd64.deb
          rm go-bin-deb-amd64.deb

          sudo chmod +x armel/mgba
          go-bin-deb generate --file .github/workflows/debmgba.json \
                              --wd . \
                              --version "${{ github.event.inputs.version }}" \
                              --arch armel

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: |
            armel/mgba
            *.deb

      - name: Upload package to Gemfury
        env:
          GEMFURY_TOKEN: ${{ secrets.GEMFURY_TOKEN }}
        run: |
          for deb in *.deb; do
            curl -F package=@$deb \
                 -u "${GEMFURY_TOKEN}:" \
                 https://push.fury.io/tunakan0-sketch/
          done
